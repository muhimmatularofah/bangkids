{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOf1qB5sqsb4Kz8jv1fqb8/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/muhimmatularofah/bangkids/blob/main/coba\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "# Gunakan perintah files.upload untuk mengunggah file\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "id": "AW9fOnGLe8P0",
        "outputId": "12b36f00-57d6-43d4-e6bc-e7c7131df8a6"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-9d1b66e5-848d-43e5-a3f2-a066278c1d60\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-9d1b66e5-848d-43e5-a3f2-a066278c1d60\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving semua_transaksi_ch11b.csv to semua_transaksi_ch11b.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##baru tapi gapake tensor"
      ],
      "metadata": {
        "id": "o4AWFL3gn17q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from mlxtend.frequent_patterns import apriori, association_rules\n",
        "\n",
        "# Load your CSV file into a pandas DataFrame\n",
        "df = pd.read_csv('semua_transaksi_ch11b.csv')\n",
        "\n",
        "# Preprocessing\n",
        "# Assuming your dataset is sorted by TRX_TS\n",
        "df['PRODUCT_NAME'] = df['PRODUCT_NAME'].astype(str)  # Ensure PRODUCT_NAME is a string\n",
        "\n",
        "# Extract features and labels\n",
        "X = df.groupby('TRX_ID')['PRODUCT_NAME'].apply(list).reset_index(name='PRODUCT_LIST')\n",
        "\n",
        "# Convert the data to a binary matrix\n",
        "basket_sets = X.explode('PRODUCT_LIST').groupby(['TRX_ID', 'PRODUCT_LIST']).size().unstack().notna().astype(int)\n",
        "\n",
        "# Apply Apriori algorithm\n",
        "frequent_itemsets = apriori(basket_sets, min_support=0.05, use_colnames=True)\n",
        "\n",
        "# Generate association rules\n",
        "rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\n",
        "\n",
        "# Display the association rules\n",
        "print(\"Association Rules:\")\n",
        "print(rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yheH_W1in4k3",
        "outputId": "7df85261-61bd-4455-f313-b31bdbe93c71"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n",
            "/usr/local/lib/python3.10/dist-packages/mlxtend/frequent_patterns/fpcommon.py:110: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Association Rules:\n",
            "                          antecedents                        consequents  \\\n",
            "0                        (Teh Tubruk)                 (Bakmi Godog Keju)   \n",
            "1                  (Bakmi Godog Keju)                       (Teh Tubruk)   \n",
            "2                        (Teh Tubruk)                (Bakmi Goreng Jawa)   \n",
            "3                 (Bakmi Goreng Jawa)                       (Teh Tubruk)   \n",
            "4                     (Mineral Water)              (Extra Kerupuk Putih)   \n",
            "5               (Extra Kerupuk Putih)                    (Mineral Water)   \n",
            "6                  (Nasi Goreng Jawa)              (Extra Kerupuk Putih)   \n",
            "7               (Extra Kerupuk Putih)                 (Nasi Goreng Jawa)   \n",
            "8                        (Teh Tubruk)              (Extra Kerupuk Putih)   \n",
            "9               (Extra Kerupuk Putih)                       (Teh Tubruk)   \n",
            "10                 (Nasi Goreng Jawa)                    (Mineral Water)   \n",
            "11                    (Mineral Water)                 (Nasi Goreng Jawa)   \n",
            "12                    (Mineral Water)                       (Nasi Putih)   \n",
            "13                       (Nasi Putih)                    (Mineral Water)   \n",
            "14                    (Mineral Water)                    (Pisang Goreng)   \n",
            "15                    (Pisang Goreng)                    (Mineral Water)   \n",
            "16                    (Mineral Water)                        (Soto Ayam)   \n",
            "17                        (Soto Ayam)                    (Mineral Water)   \n",
            "18                       (Teh Tubruk)                    (Mineral Water)   \n",
            "19                    (Mineral Water)                       (Teh Tubruk)   \n",
            "20                 (Nasi Goreng Jawa)                       (Teh Tubruk)   \n",
            "21                       (Teh Tubruk)                 (Nasi Goreng Jawa)   \n",
            "22                            (Rawon)                       (Nasi Putih)   \n",
            "23                       (Nasi Putih)                            (Rawon)   \n",
            "24                        (Soto Ayam)                       (Nasi Putih)   \n",
            "25                       (Nasi Putih)                        (Soto Ayam)   \n",
            "26                       (Teh Tubruk)                       (Nasi Putih)   \n",
            "27                       (Nasi Putih)                       (Teh Tubruk)   \n",
            "28                       (Teh Tubruk)                    (Pisang Goreng)   \n",
            "29                    (Pisang Goreng)                       (Teh Tubruk)   \n",
            "30                       (Teh Tubruk)                            (Rawon)   \n",
            "31                            (Rawon)                       (Teh Tubruk)   \n",
            "32                       (Teh Tubruk)                        (Soto Ayam)   \n",
            "33                        (Soto Ayam)                       (Teh Tubruk)   \n",
            "34  (Nasi Goreng Jawa, Mineral Water)                       (Teh Tubruk)   \n",
            "35     (Nasi Goreng Jawa, Teh Tubruk)                    (Mineral Water)   \n",
            "36        (Teh Tubruk, Mineral Water)                 (Nasi Goreng Jawa)   \n",
            "37                 (Nasi Goreng Jawa)        (Teh Tubruk, Mineral Water)   \n",
            "38                    (Mineral Water)     (Nasi Goreng Jawa, Teh Tubruk)   \n",
            "39                       (Teh Tubruk)  (Nasi Goreng Jawa, Mineral Water)   \n",
            "\n",
            "     support  confidence      lift  \n",
            "0   0.095162    0.277579  2.110739  \n",
            "1   0.095162    0.723623  2.110739  \n",
            "2   0.059553    0.173711  1.559756  \n",
            "3   0.059553    0.534730  1.559756  \n",
            "4   0.052308    0.232787  1.791887  \n",
            "5   0.052308    0.402647  1.791887  \n",
            "6   0.071832    0.421774  3.246620  \n",
            "7   0.071832    0.552930  3.246620  \n",
            "8   0.063237    0.184456  1.419855  \n",
            "9   0.063237    0.486767  1.419855  \n",
            "10  0.104003    0.610671  2.717651  \n",
            "11  0.104003    0.462842  2.717651  \n",
            "12  0.057097    0.254098  1.290940  \n",
            "13  0.057097    0.290081  1.290940  \n",
            "14  0.051449    0.228962  1.107941  \n",
            "15  0.051449    0.248960  1.107941  \n",
            "16  0.052063    0.231694  1.335397  \n",
            "17  0.052063    0.300071  1.335397  \n",
            "18  0.101793    0.296920  1.321374  \n",
            "19  0.101793    0.453005  1.321374  \n",
            "20  0.086935    0.510454  1.488947  \n",
            "21  0.086935    0.253582  1.488947  \n",
            "22  0.086076    0.558566  2.837779  \n",
            "23  0.086076    0.437305  2.837779  \n",
            "24  0.073674    0.424628  2.157314  \n",
            "25  0.073674    0.374298  2.157314  \n",
            "26  0.081164    0.236748  1.202791  \n",
            "27  0.081164    0.412352  1.202791  \n",
            "28  0.122667    0.357808  1.731425  \n",
            "29  0.122667    0.593583  1.731425  \n",
            "30  0.057711    0.168338  1.092387  \n",
            "31  0.057711    0.374502  1.092387  \n",
            "32  0.085462    0.249284  1.436777  \n",
            "33  0.085462    0.492569  1.436777  \n",
            "34  0.055010    0.528926  1.542826  \n",
            "35  0.055010    0.632768  2.815992  \n",
            "36  0.055010    0.540410  3.173108  \n",
            "37  0.055010    0.322999  3.173108  \n",
            "38  0.055010    0.244809  2.815992  \n",
            "39  0.055010    0.160458  1.542826  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "\n",
        "# Convert frozensets to lists for JSON serialization\n",
        "frequent_itemsets['itemsets'] = frequent_itemsets['itemsets'].apply(list)\n",
        "rules['antecedents'] = rules['antecedents'].apply(list)\n",
        "rules['consequents'] = rules['consequents'].apply(list)\n",
        "\n",
        "# Simpan model Apriori dan aturan asosiasi dalam format JSON\n",
        "model_and_rules = {\n",
        "    'frequent_itemsets': frequent_itemsets.to_dict(orient='records'),\n",
        "    'association_rules': rules.to_dict(orient='records')\n",
        "}\n",
        "\n",
        "with open('market_basket_model.json', 'w') as json_file:\n",
        "    json.dump(model_and_rules, json_file)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kLP1ZhK5IFFj",
        "outputId": "e468ed25-bd35-4cc1-c749-21b183ed018d"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        }
      ]
    }
  ]
}